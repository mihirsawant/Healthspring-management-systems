/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Appointment;
import Business.WorkQueue.AppointmentSlots;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private String dateFormat = "MM-dd-yyyy";
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
       // valueLabel.setText(enterprise.getName());
    }

    public void GetAppointmentDetails(){
    try {
            boolean isAppointmentPresent = false;
            
            Date appointmentDate = new SimpleDateFormat(dateFormat).parse(txtAppointmentDate.getText()); 
            
            for(Appointment appointment : userAccount.getAppointmentList()){
                if(appointment.getAppointmentDate().compareTo(appointmentDate) == 0){
                    PopulateAppointmentDetails(appointment);
                    isAppointmentPresent = true;
                }
                break;
            }
            
            // if appointment is not present for that date then create appointment schedule for that date.
            if(!isAppointmentPresent){
                Appointment ap = new Appointment();
                ap.createSlots();
                ap.setAppointmentDate(appointmentDate);
                userAccount.getAppointmentList().add(ap);
                PopulateAppointmentDetails(ap);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter proper date" );
        }
    }
    
       public void PopulateAppointmentDetails(Appointment appointment){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for(AppointmentSlots appointmentSlots : appointment.getAppointmentSlots()){
             
            Object[] row = new Object[5];
            row[0] = appointment.getAppointmentDate();
            row[1] = appointmentSlots;
            row[2] = appointmentSlots.getPatient();
            row[3] = appointmentSlots.isIsBooked() ? "Booked" : "";
            row[4] = appointmentSlots.isIsComplete() ? "Done" : "Waiting";
            model.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        txtAppointmentDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtGetAppointments = new javax.swing.JButton();
        btnAddDetails = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time", "Patient", "Booked", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        requestTestJButton.setBackground(new java.awt.Color(255, 102, 102));
        requestTestJButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        requestTestJButton.setForeground(new java.awt.Color(255, 255, 255));
        requestTestJButton.setText("REQUEST TEST");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        refreshTestJButton.setBackground(new java.awt.Color(255, 102, 102));
        refreshTestJButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(255, 102, 102));
        enterpriseLabel.setText("DOCTOR WORK AREA");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 102));
        jLabel1.setText("Date:");

        txtGetAppointments.setBackground(new java.awt.Color(255, 102, 102));
        txtGetAppointments.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtGetAppointments.setForeground(new java.awt.Color(255, 255, 255));
        txtGetAppointments.setText("GET APPOINTMENTS");
        txtGetAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGetAppointmentsActionPerformed(evt);
            }
        });

        btnAddDetails.setBackground(new java.awt.Color(255, 102, 102));
        btnAddDetails.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnAddDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnAddDetails.setText("ADD DETAILS");
        btnAddDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDetailsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 102, 102));
        jLabel2.setText("(MM-dd-yyyy)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(btnAddDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(requestTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 859, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtGetAppointments, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addComponent(txtAppointmentDate))
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshTestJButton)
                .addGap(132, 132, 132))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshTestJButton)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAppointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(22, 22, 22)
                .addComponent(txtGetAppointments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDetails)
                    .addComponent(requestTestJButton))
                .addContainerGap(134, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select any row !!!");
            return;
        }
        else{
            Patient objPatient = (Patient)workRequestJTable.getValueAt(selectedRow, 2);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("RequestLabTestJPanel", new RequestLabTestJPanel(userProcessContainer, userAccount, enterprise,objPatient));
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        GetAppointmentDetails();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void txtGetAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGetAppointmentsActionPerformed
        GetAppointmentDetails();
    }//GEN-LAST:event_txtGetAppointmentsActionPerformed

    private void btnAddDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDetailsActionPerformed
        // Open add details panel
        try {
             
            int selectedRow = workRequestJTable.getSelectedRow();

            if(selectedRow < 0 ){
                JOptionPane.showMessageDialog(null, "Please select any slots");
                return;
            }
            else{
                Date appointmentDate = (Date)workRequestJTable.getValueAt(selectedRow, 0);
                AppointmentSlots objAppointmentSlots = (AppointmentSlots)workRequestJTable.getValueAt(selectedRow, 1);
                
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                userProcessContainer.add("UpdateAppointmentJPanel", new UpdateAppointmentJPanel(userProcessContainer, userAccount, appointmentDate,objAppointmentSlots));
                layout.next(userProcessContainer);
            }
         }
         catch (Exception e) {
            JOptionPane.showMessageDialog(null, " Somthing went wrong. Please try again !!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddDetailsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDetails;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTextField txtAppointmentDate;
    private javax.swing.JButton txtGetAppointments;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}